
동적할당: 런타임에 메모리 공간을 할당하는 것
	: 동적할당은 가변메모리를 가진 배열이라고 보면된다.
	: 포인터의 초기화값으로 쓰여 포인터가 레퍼런스변수역할을 하게 한다.
		: 그러니까 포인터생성-->포인터가가리킬메모리공간확보-->포인터를 통한 메모리공간참조
	: malloc , free
		: stdlib.h 헤더파일에 포함되어있다
		: malloc() : 메모리를 동적으로 할당
			: void* malloc(unsinged int size); 가 함수의 원형이다
				: 반환형이 void* 형 ---> 포인터형태로 사용될 수 있는 아이란 뜻. 사용전 용도에 맞는 포인터로 형변환해 사용하란거
				: 만약에 정상적으로 동적할당이 이루어지지 않으면 NULL포인터를 반환한다.
					:NULL 포인터: 0번지
						: NULL 로 표기 되고 전처리 단계에서 0으로 바뀌므로 정수 0과 같으나 그냥 NULL으로 명시해서 써라
					:동적할당 시도 코드 다음에 반드시 NULL 값인지 체크햊줘야된다
						:ex)
						int* p = (int *)malloc(sizeof(int));
						if(p==NULL){
						printf("something is wrong here");
						exit(1);
						}



			: 사용형식 == 포인터로 형변환한 것을 초기화하여 사용한다
				(자료형*)malloc(sizeof(자료형));

					:ex) int* p = (int *)malloc(n*sizeof(int));
					:malloc() 괄호 안에는 바이트단위의 사이즈가 들어가야되는건데 컴파일러마다 크기가 다를 수 있으니 sizeof 써주는거다
					:n은 요소의 개수를 의미한다
						:같은 자료형의 변수들을 하나하나 동적할당해주는것보다 배열처럼 한번에 동적할당하는게 편하기때문
							:포인터를 마치 배열처럼 사용하면 된다.
								: 포인터명[n] = 배열명[n] , 포인터명+ n = &(배열명[n]) 이므로
									: scanf("형식지정자",&포인터명[n]);   // 배열명 자체가 아닌 요소 단위로 접근시 & 사용하는거 잊지x
									: printf("형식지정자",포인터명[n]); // 요소단위로 사용시 * 필요없음 주의
									: free(포인터배열명[n]) //  포인터배열의 요소 단위로 메모리 반환

					:포인터로 형변환해주는 이유는 malloc() 반환형이 void* 로 자료형을 따로 지정해주어야하는 포인터형이라서.

			: 동적할당한 저장공간을 다 사용한 이후에는 직접 free()써서 이후에 동적할당할 공간ㄴ을 많이 확보해두어야됨

		free(): 메모리 반환
			:형식
				free(동적할당된 포인터명);

			:malloc 쓰든 calloc쓰든 공통으로 쓴다
				: 메모리공간 확보를 위하여

		





